---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: lidarr
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.2.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3



  values:


    controllers:
      lidarr:
        annotations:
          reloader.stakater.com/auto: 'true'

        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/lidarr-develop
              tag: 2.4.2.4238@sha256:7b95b79d63de1325ae04c3226f6ac9fd273448a0b1c39ce8909ba89e3ceb3103

            env:
              COMPlus_EnableDiagnostics: "0"
              LIDARR__AUTHENTICATION_METHOD: External
              LIDARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
              LIDARR__APP__INSTANCENAME: Lidarr
              LIDARR__SERVER__PORT: &port 8686
              LIDARR__LOG__LEVEL: info
              LIDARR__APP__THEME: dark
              LIDARR__LOG__ANALYTICSENABLED: 'false'
              TZ: ${TIMEZONE}

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 1Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        controller: lidarr
        ports:
          http:
            port: *port

    ingress:
      app:
        className: internal
        hosts:
          - host: '{{ .Release.Name }}.${SECRET_DOMAIN}'
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

    persistence:
      config:
        enabled: true
        existingClaim: lidarr

      tmp:
        type: emptyDir

      media:
        enabled: true
        type: nfs
        server: ${SECRET_NFS_SVC}
        path: /mnt/lab-pool/k3s
        globalMounts:
          - path: /media
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "lidarr"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: longhorn
