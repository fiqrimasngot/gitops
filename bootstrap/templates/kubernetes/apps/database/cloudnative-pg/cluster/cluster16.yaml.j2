---
# yaml-language-server: $schema=https://kubernetes-schemas.kokoro.wtf/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres
spec:
  instances: 1
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.2-v0.2.1
  primaryUpdateStrategy: unsupervised
  storage:
    size: 10Gi
    storageClass: longhorn
  superuserSecret:
    name: cloudnative-pg
  enableSuperuserAccess: true
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  # bootstrap:
  #   recovery:
  #     source: &previousCluster postgres-v39
  # postgresql:
    parameters:
      max_connections: "600"
      shared_buffers: 512MB
    shared_preload_libraries:
      - "vectors.so"
  monitoring:
    enablePodMonitor: true
  backup:
    retentionPolicy: 30d
    barmanObjectStore:
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cloudnative-pg/
      endpointURL: http://minio.storage.svc.cluster.local:9000
      serverName: &currentCluster postgres-v40
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg
          key: aws-secret-access-key
  # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       wal:
  #         compression: bzip2
  #         maxParallel: 8
  #       destinationPath: s3://cnpg/
  #       endpointURL: https://${CLUSTER_SECRET_CLOUDFLARE_ACCOUNT_ID}.r2.cloudflarestorage.com
  #       s3Credentials:
  #         accessKeyId:
  #           name: cloudnative-pg
  #           key: aws-access-key-id
  #         secretAccessKey:
  #           name: cloudnative-pg
  #           key: aws-secret-access-key
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-lb
  annotations:
    # external-dns.alpha.kubernetes.io/hostname: postgres.kokoro.wtf
    io.cilium/lb-ipam-ips: ${SECRET_POSTGRES_SVC}
spec:
  type: LoadBalancer
  externalTrafficPolicy: Cluster
  ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
  selector:
    cnpg.io/cluster: postgres
    role: primary
